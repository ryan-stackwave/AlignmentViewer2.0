{"version":3,"sources":["index.css","App.scss","AlignmentViewer.scss","MolecularStyles.module.scss"],"names":[],"mappings":"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","file":"main.4b1175c8.chunk.css","sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","/** App.scss */\n.settings_box {\n  font-size: 11px;\n  margin: auto;\n  width: 450px;\n  border: 2px solid black;\n  padding: 15px;\n}\n.settings_box h3 {\n  text-align: center;\n}\n.settings_box h2 {\n  padding-top: 0;\n  margin-top: 0;\n  text-align: center;\n}\n\n.settings_box label strong {\n  width: 200px;\n  display: inline-block;\n}\n.settings_box label select,\n.settings_box label .zoom-level {\n  width: 200px;\n  display: inline-block;\n}\n\n.examples button.button-link {\n  border: 1px solid transparent;\n}\n\nbutton.button-link {\n  background: none !important;\n  border: none;\n  //padding: 0 !important;\n  /*optional*/\n  //font-family: arial, sans-serif;\n  /*input has OS specific font-family*/\n  color: #069;\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.av_holder {\n  padding-top: 20px;\n}\n","/** App.scss */\n@use \"./MolecularStyles.module.scss\";\n\n$layoutGapSize: 5px;\n$annotationContentGapSize: 20px;\n$rowHeight: 25px;\n\n.alignment_viewer.annotation-closed .av-annotation {\n  display: none;\n}\n\n.alignment_viewer {\n  display: grid;\n  grid-template-columns: 10px repeat(auto-fill, minmax(200px, 1fr)) 10px;\n  grid-auto-rows: minmax($rowHeight, auto);\n  grid-gap: $layoutGapSize;\n\n  .av-widget {\n    grid-column: 2 / -2;\n    grid-row-start: auto;\n\n    display: flex;\n    flex-direction: row;\n\n    position: relative;\n  }\n  .av-widget.av-webgl-msa {\n    display: none;\n  }\n  .av-widget.av-conservation-gaps {\n    grid-row-end: span 3;\n  }\n  .av-widget.av-sequence-logo {\n    grid-row-end: span 4;\n  }\n  .av-widget.av-ace-msa {\n    grid-row-end: span 23;\n  }\n\n  .av-annotation,\n  .av-content {\n    display: flex;\n    overflow: scroll;\n  }\n  .av-annotation {\n    flex: 0 1 20%;\n    justify-content: flex-end;\n    align-items: center;\n    /* bit of a hack to put space between annotation and content */\n    margin-right: $annotationContentGapSize;\n    font-weight: bold;\n    text-align: right;\n  }\n  .av-content {\n    flex: 1 0 80%;\n    position: relative;\n    align-items: center;\n  }\n\n  .av-widget.av-consensus-seq #ace-consensusseq,\n  .av-widget.av-target-seq #ace-queryseq,\n  .av-widget.av-position-indicator #ace-positions {\n    line-height: $rowHeight;\n  }\n\n  .av-widget.av-consensus-seq #ace-consensusseq,\n  .av-widget.av-target-seq #ace-queryseq,\n  .av-widget.av-position-indicator #ace-positions,\n  .av-widget.av-ace-msa #ace-alignment,\n  .av-widget.av-ace-msa #ace-alignment-metadata {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n    bottom: 0px;\n    overflow: scroll;\n    overflow-x: hidden;\n    overflow-y: hidden;\n  }\n\n  svg.conservation .gapCount rect {\n    fill: #b7b7b7;\n  }\n  svg.conservation .entropy rect {\n    fill: #000000;\n  }\n}\n\n/*\n.alignment-viewer .av-widget .close-widget{\n\tposition: absolute;\n\ttop:0;\n\tright:0;\n\tpadding:5px;\n}\n.alignment-viewer .av-widget .close-widget button{\n  background: none!important;\n  border: none;\n  padding: 0!important;\n  cursor: pointer;\n  color: red;\n  font-weight: bold;\n}\n.alignment-viewer .av-widget .close-widget button:focus { \noutline: none; \n}\n*/\n\n/*\n * OLD\n\n.AlignmentViewer {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 100px 100px 40px 40px 30px 700px;\n  grid-gap: 5px;\n  padding: 10px;\n  position: relative;\n}\n\n.alignment_box {\n  position: relative;\n  grid-column-start: 2;\n  grid-column-end: 4;\n  grid-row-start: 6;\n  grid-row-end: 6;\n}\n\n.ace_content {\n  cursor: auto;\n}\n*/\n/**\n * Conservation / Entropy / Gap plots\n \n.conservation_box {\n  position: relative;\n  grid-column-start: 2;\n  grid-column-end: 4;\n  grid-row-start: 1;\n  grid-row-end: 1;\n}\n#sequence_conservation {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  overflow-x: scroll;\n}\n#sequence_conservation .svg_container {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\nsvg.conservation .gapCount rect {\n  fill: #b7b7b7;\n}\nsvg.conservation .entropy rect {\n  fill: #000000;\n}*/\n\n/**\n * Logo plot\n \n.logo_box {\n  position: relative;\n  grid-column-start: 2;\n  grid-column-end: 4;\n  grid-row-start: 2;\n  grid-row-end: 2;\n}\n.logo_box #sequence_logo {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  overflow-x: scroll;\n}*/\n\n/**\n * Position indicator\n \n.position_box {\n  position: relative;\n  grid-column-start: 2;\n  grid-column-end: 4;\n  grid-row-start: 5;\n  grid-row-end: 5;\n}\n.position_box #ace-positions {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  font-family: Monaco, Menlo, \"Ubuntu Mono\", Consolas, source-code-pro,\n    monospace;\n  font-size: 12px;\n  height: 30px;\n  line-height: 30px;\n  padding-left: 3px;\n  overflow: scroll;\n  overflow-x: hidden;\n  border-bottom: 1px solid red;\n  border-top: 1px solid red;\n}*/\n\n/**\n * Query Sequence\n \n.queryseq_box {\n  position: relative;\n  grid-column-start: 2;\n  grid-column-end: 4;\n  grid-row-start: 3;\n  grid-row-end: 3;\n}\n.queryseq_box #ace-queryseq {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  font-family: Monaco, Menlo, \"Ubuntu Mono\", Consolas, source-code-pro,\n    monospace;\n  font-size: 12px;\n  height: 40px;\n  line-height: 40px;\n  padding-left: 3px;\n  overflow: scroll;\n  overflow-x: hidden;\n}*/\n\n/**\n * Consensus Sequence\n \n.consensusseq_box {\n  position: relative;\n  grid-column-start: 2;\n  grid-column-end: 4;\n  grid-row-start: 4;\n  grid-row-end: 4;\n}\n.consensusseq_box #ace-consensusseq {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  font-family: Monaco, Menlo, \"Ubuntu Mono\", Consolas, source-code-pro,\n    monospace;\n  font-size: 12px;\n  height: 40px;\n  line-height: 40px;\n  padding-left: 3px;\n  overflow: scroll;\n  overflow-x: hidden;\n}*/\n\n/**\n * Individual sequence data as well as the MSA as a canvas in WebGL\n \n.datatable_box {\n  position: relative;\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: 6;\n  grid-row-end: 6;\n  overflow: scroll;\n}\n*/\n/**\n * Full ace alignment\n \n.alignment_box #ace-alignment {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  visibility: hidden;\n  border-color: gray;\n  border-style: solid;\n  border-width: 1px;\n  z-index: 10;\n}\n.alignment_box #ace-alignment.loaded {\n  visibility: visible;\n}*/\n\n/**\n * Interaction indicators\n \n\n#column_mouseover {\n  position: absolute;\n  display: none;\n  pointer-events: none;\n  height: 1050px;\n  z-index: 1000;\n  border: solid 2px purple;\n}\n*/\n","/**\n * MolecularStyles.module.scss\n * \n * Style definitions for amino acids and nucleotides in e.g. an alignment or logo.\n *  \n * INDIVIDUAL AMINO ACID / NUCLEOTIDE CLASSES\n * The Ace editor prefixes all classes it adds in the alignment mode with \"ace_\". Because\n * of this, any other components (e.g., logo plots) should also apply classes with this\n * prefix. Amino acids and nucleotides will be styled with the single letter upper case\n * character, prefixed with ace_ (e.g., Alanine and Adenine would both be ace_A).\n * \n * Positional modifying classes can be accessed via 4 exported parameters:\n *    preAceQueryClass:       string to indicate a residue matches the query sequence (this\n *                                (should only be used by the ace highlight parser)\n *    preAceConsensusClass:   string to indicate a residue matches the consensus sequence \n *                                (should only be used by the ace highlight parser)\n *    aceQueryClass:          final ace_ prefixed class name to indicate a residue matches \n *                            the query sequence \n *    aceConsensusClass:      final ace_ prefixed class name to indicate a residue matches    \n *                            the consensus sequence\n *\n * TOP LEVEL STYLING\n * Style of an alignment or logo are dictated by 3 parent element classes #1, #2, #3.\n * All 3 are required and must be on the same parent element. The top level classes\n * are \"exported\" and should be read by typescript and the value placed as the classes:\n *  Class  Exported Parameter    Description\n *  -----  ------------------    -----------\n *    #1   aaAlignTypeClass            style alignment as amino acid sequences\n *    #1   ntAlignTypeClass            style alignment as nucleotide sequences\n *\n *    #2   styPosAllClass              style all positions \n *    #2   styPosQueryClass            style only positions that have the ace_query class \n *    #2   styPosQueryDiffClass        style only positions that don't have the ace_query class \n *    #2   styPosConsensusClass        style only positions that have the ace_consensus class \n *    #2   styPosConsensusDiffClass    style only positions that don't have the ace_consensus class \n *\n *    #3   aaStyClass_{STYLENAME}      amino acid style with name {STYLENAME} excluding curly braces\n *    #3   aaStyColorOrder_{STYLENAME} order of amino acids in the colors object for this style. this\n *                                     string is comma space (, ) delimited.\n *    #3   aaStyColors_{STYLENAME}     colors for all amino acids for this style. this string is \n *                                     comma space (, ) delimited.\n *    #3   ntStyClass_{STYLENAME}      nucleotide style with name {STYLENAME} excluding curly braces\n *    #3   ntStyColorOrder_{STYLENAME} order of nucleotides in the colors object for this style. this\n *                                     string is comma space (, ) delimited.\n *    #3   ntStyColors_{STYLENAME}     colors for all nucleotides for this style. this string is \n *                                     comma space (, ) delimited.\n *\n *\n * Example: e.g.:\n *   <div class=\"$alignTypeAA $aaStyleDefault $styPosQuery\">\n *     <logo .../> || <aceMSA .../>\n *   </div>\n */\n\n//ace specific props\n$acePrefix: ace_;\n$preAceQueryClass: query;\n$preAceConsensusClass: consensus;\n$aceQueryClass: $acePrefix + $preAceQueryClass;\n$aceConsensusClass: $acePrefix + $preAceConsensusClass;\n\n//general global props\n$transparentLetterClass: transparent-letters;\n$transparentBackgroundClass: transparent-background;\n$aaStyleClassPrefix: aa-alignment-style-;\n$ntStyleClassPrefix: nt-alignment-style-;\n$styPosClassPrefix: alignment-positions-tostyle-;\n$defaultBackgroundAlpha: 0.25;\n\n//both nucleotide and amino acid have the same options for position coloring\n$styPosAll: $styPosClassPrefix + all;\n$styPosQuery: $styPosClassPrefix + query;\n$styPosQueryDiff: $styPosClassPrefix + query-diff;\n$styPosConsensus: $styPosClassPrefix + consensus;\n$styPosConsensusDiff: $styPosClassPrefix + consensus-diff;\n\n//amino acid props\n$aaProps: (\n  topLevelAlignmentClass: alignment-aa,\n  styles: (\n    Default: (\n      description: \"Default\",\n      topLevelClass: $aaStyleClassPrefix + default,\n      backgroundAlpha: $defaultBackgroundAlpha,\n      colors: (\n        A: #33cc00,\n        R: #cc0000,\n        N: #6600cc,\n        D: #0033ff,\n        C: #ffff00,\n        Q: #6600cc,\n        E: #0033ff,\n        G: #33cc00,\n        H: #009900,\n        I: #33cc00,\n        L: #33cc00,\n        K: #cc0000,\n        M: #33cc00,\n        F: #009900,\n        P: #33cc00,\n        S: #0099ff,\n        T: #0099ff,\n        W: #009900,\n        Y: #009900,\n        V: #33cc00\n      )\n    ),\n    Hydrophobicity: (\n      description: \"Hydrophobicity\",\n      //(red = hydrophilic, blue = hydrophobic)\n        topLevelClass: $aaStyleClassPrefix + hydrophobicity,\n      backgroundAlpha: $defaultBackgroundAlpha,\n      /*\n      colors based on: https://www.sigmaaldrich.com/life-science/metabolomics/learning-center/amino-acid-reference-chart.html\n      to get hex in python:\n          from matplotlib import cm\n          def rgb2hex(r,g,b):\n            return \"#{:02x}{:02x}{:02x}\".format(r,g,b)\n\n          redBlueColormap = cm.get_cmap('bwr', 155)\n          aas = {  \n            'F': 100,   'I': 99,  'W': 97,  'L': 97,  'V': 76,  'M': 74, 'Y': 63,  \n            'C': 49,  'A': 41,   'T': 13,  'H': 8,  'G': 0, 'S': -5,  'Q': -10,   \n            'R': -14,  'K': -23,  'N': -28,  'E': -31, 'P': -46,  'D': -55\n          }\n\n          //normalize and convert to rgb\n          rgba = {}\n          for aa in aas.keys(): \n            rgba[aa] = redBlueColormap(aas[aa]+55)\n\n          hex = {}\n          for aa in aas.keys(): \n              hex[aa] = rgb2hex(int(rgba[aa][0]*255), int(rgba[aa][1]*255), int(rgba[aa][2]*255))\n\n          print(hex);\n      */\n        colors:\n        (\n          F: #ff0000,\n          I: #ff0000,\n          W: #ff0606,\n          L: #ff0606,\n          V: #ff4c4c,\n          M: #ff5252,\n          Y: #ff7777,\n          C: #ffa5a5,\n          A: #ffc0c0,\n          T: #e1e1ff,\n          H: #d0d0ff,\n          G: #b6b6ff,\n          S: #a5a5ff,\n          Q: #9595ff,\n          R: #8787ff,\n          K: #6969ff,\n          N: #5959ff,\n          E: #4f4fff,\n          P: #1d1dff,\n          D: #0000ff\n        )\n    )\n  )\n);\n\n//amino acid props\n$ntProps: (\n  topLevelAlignmentClass: alignment-nt,\n  styles: (\n    Default: (\n      description: \"Default\",\n      topLevelClass: $ntStyleClassPrefix + default,\n      backgroundAlpha: $defaultBackgroundAlpha,\n      colors: (\n        A: #5050ff,\n        C: #e00000,\n        G: #00c000,\n        T: #e6e600,\n        U: #cc9900,\n        R: #2e8b57,\n        Y: #ff8c00\n      )\n    )\n  )\n);\n\n//\n// EXPORT\n// export alignment type classes, color scheme classes, position coloring classes,\n// and then individual colors for use in javascript.\n//\n\n:export {\n  acePrefix: $acePrefix;\n  preAceQueryClass: $preAceQueryClass;\n  preAceConsensusClass: $preAceConsensusClass;\n  aceQueryClass: $aceQueryClass;\n  aceConsensusClass: $aceConsensusClass;\n  transparentLetterClass: $transparentLetterClass;\n  transparentBackgroundClass: $transparentBackgroundClass;\n\n  aaAlignTypeClass: map-get($aaProps, topLevelAlignmentClass);\n  ntAlignTypeClass: map-get($ntProps, topLevelAlignmentClass);\n\n  styPosAllClass: $styPosAll;\n  styPosQueryClass: $styPosQuery;\n  styPosQueryDiffClass: $styPosQueryDiff;\n  styPosConsensusClass: $styPosConsensus;\n  styPosConsensusDiffClass: $styPosConsensusDiff;\n}\n\n//export coloring\n:export {\n  @each $styleName, $styleObj in map-get($aaProps, styles) {\n    #{unquote(\"aaStyClass_\"+$styleName)}: map-get($styleObj, topLevelClass);\n    #{unquote(\"aaStyDesc_\"+$styleName)}: unquote(\n      map-get($styleObj, description)\n    );\n    #{unquote(\"aaStyBGAlpha_\"+$styleName)}: map-get($styleObj, backgroundAlpha);\n    #{unquote(\"aaStyColorOrder_\"+$styleName)}: map-keys(\n      map-get($styleObj, colors)\n    );\n    #{unquote(\"aaStyColors_\"+$styleName)}: map-values(\n      map-get($styleObj, colors)\n    );\n  }\n}\n:export {\n  @each $styleName, $styleObj in map-get($ntProps, styles) {\n    #{unquote(\"ntStyClass_\"+$styleName)}: map-get($styleObj, topLevelClass);\n    #{unquote(\"ntStyDesc_\"+$styleName)}: unquote(\n      map-get($styleObj, description)\n    );\n    #{unquote(\"ntStyBGAlpha_\"+$styleName)}: map-get($styleObj, backgroundAlpha);\n    #{unquote(\"ntStyColorOrder_\"+$styleName)}: map-keys(\n      map-get($styleObj, colors)\n    );\n    #{unquote(\"ntStyColors_\"+$styleName)}: map-values(\n      map-get($styleObj, colors)\n    );\n  }\n}\n\n//\n// AMINO ACID CLASS DEFINITIONS\n//\n// Programmatically combine into one big set of selectors. Export\n// as global selector to avoid distinct naming from css modules.\n//\n\n@each $styleName, $styleObj in map-get($aaProps, styles) {\n  $alignmentClass: map-get($aaProps, topLevelAlignmentClass);\n  $styleClass: map-get($styleObj, topLevelClass);\n  $backgroundAlpha: map-get($styleObj, backgroundAlpha);\n\n  @each $aa, $color in map-get($styleObj, colors) {\n    $aceAAClass: $acePrefix + $aa;\n\n    //set background color to white if the \"no background color\" class is added\n    //easier than\n    :global\n      .#{$alignmentClass}.#{$transparentBackgroundClass}.#{$styleClass}\n      .#{$aceAAClass} {\n      background-color: transparent !important;\n    }\n\n    //remove alpha on background color and hide letter coloring\n    //\"no letter color\" class is added\n\n    :global\n      .#{$alignmentClass}.#{$transparentLetterClass}.#{$styleClass}.#{$styPosAll}\n      .#{$aceAAClass},\n    :global\n      .#{$alignmentClass}.#{$transparentLetterClass}.#{$styleClass}.#{$styPosConsensus}\n      .#{$aceAAClass}.#{$aceConsensusClass},\n    :global\n      .#{$alignmentClass}.#{$transparentLetterClass}.#{$styleClass}.#{$styPosConsensusDiff}\n      .#{$aceAAClass}:not(.#{$aceConsensusClass}),\n    :global\n      .#{$alignmentClass}.#{$transparentLetterClass}.#{$styleClass}.#{$styPosQuery}\n      .#{$aceAAClass}.#{$aceQueryClass},\n    :global\n      .#{$alignmentClass}.#{$transparentLetterClass}.#{$styleClass}.#{$styPosQueryDiff}\n      .#{$aceAAClass}:not(.#{$aceQueryClass}) {\n      //opacity: 1 !important;\n      background-color: rgba($color, 1) !important;\n      color: rgba($color, 0) !important;\n    }\n\n    //\"default\" style - slightly transparent colored background and fully colored letters\n    :global .#{$alignmentClass}.#{$styleClass}.#{$styPosAll} .#{$aceAAClass},\n    :global\n      .#{$alignmentClass}.#{$styleClass}.#{$styPosConsensus}\n      .#{$aceAAClass}.#{$aceConsensusClass},\n    :global\n      .#{$alignmentClass}.#{$styleClass}.#{$styPosConsensusDiff}\n      .#{$aceAAClass}:not(.#{$aceConsensusClass}),\n    :global\n      .#{$alignmentClass}.#{$styleClass}.#{$styPosQuery}\n      .#{$aceAAClass}.#{$aceQueryClass},\n    :global\n      .#{$alignmentClass}.#{$styleClass}.#{$styPosQueryDiff}\n      .#{$aceAAClass}:not(.#{$aceQueryClass}) {\n      @if $aa == S {\n        //serine glyph needs stoke coloring also\n        color: $color;\n        stroke: $color;\n        fill: #ffffff;\n        background-color: rgba($color, $backgroundAlpha);\n      } @else {\n        color: $color;\n        fill: $color;\n        background-color: rgba($color, $backgroundAlpha);\n      }\n    }\n  }\n}\n\n//\n// NUCLEOTIDE CLASS DEFINITIONS\n// Programmatically combine into one big set of selectors. Export\n// as global selector to avoid distinct naming from css modules.\n//\n@each $styleName, $styleObj in map-get($ntProps, styles) {\n  $alignmentClass: map-get($ntProps, topLevelAlignmentClass);\n  $styleClass: map-get($styleObj, topLevelClass);\n  $backgroundAlpha: map-get($styleObj, backgroundAlpha);\n\n  @each $nt, $color in map-get($styleObj, colors) {\n    $aceNTClass: $acePrefix + $nt;\n\n    //set background color to white if the \"no background color\" class is added\n    :global\n      .#{$alignmentClass}.#{$transparentBackgroundClass}.#{$styleClass}\n      .#{$aceNTClass} {\n      background-color: transparent !important;\n    }\n    //remove alpha on background color and hide letter coloring\n    //\"no letter color\" class is added\n    :global\n      .#{$alignmentClass}.#{$transparentLetterClass}.#{$styleClass}.#{$styPosAll}\n      .#{$aceNTClass},\n    :global\n      .#{$alignmentClass}.#{$transparentLetterClass}.#{$styleClass}.#{$styPosConsensus}\n      .#{$aceNTClass}.#{$aceConsensusClass},\n    :global\n      .#{$alignmentClass}.#{$transparentLetterClass}.#{$styleClass}.#{$styPosConsensusDiff}\n      .#{$aceNTClass}:not(.#{$aceConsensusClass}),\n    :global\n      .#{$alignmentClass}.#{$transparentLetterClass}.#{$styleClass}.#{$styPosQuery}\n      .#{$aceNTClass}.#{$aceQueryClass},\n    :global\n      .#{$alignmentClass}.#{$transparentLetterClass}.#{$styleClass}.#{$styPosQueryDiff}\n      .#{$aceNTClass}:not(.#{$aceQueryClass}) {\n      background-color: rgba($color, 1) !important;\n      color: rgba($color, 0) !important;\n    }\n\n    //\"default\" style - slightly transparent colored background and fully colored letters\n    :global .#{$alignmentClass}.#{$styleClass}.#{$styPosAll} .#{$aceNTClass},\n    :global\n      .#{$alignmentClass}.#{$styleClass}.#{$styPosConsensus}\n      .#{$aceNTClass}.#{$aceConsensusClass},\n    :global\n      .#{$alignmentClass}.#{$styleClass}.#{$styPosConsensusDiff}\n      .#{$aceNTClass}:not(.#{$aceConsensusClass}),\n    :global\n      .#{$alignmentClass}.#{$styleClass}.#{$styPosQuery}\n      .#{$aceNTClass}.#{$aceQueryClass},\n    :global\n      .#{$alignmentClass}.#{$styleClass}.#{$styPosQueryDiff}\n      .#{$aceNTClass}:not(.#{$aceQueryClass}) {\n      color: $color;\n      fill: $color; //for logo\n      background-color: rgba($color, $backgroundAlpha);\n    }\n  }\n}\n\n/**\n *\n *\n * SPECIAL CASES\n *\n *\n */\n\n//SPECIAL CASE 1\n//\n//the glyph for \"S\" needs to have a fill and stroke\n//this selector captures an odd case - when user selects\n//nucleotide alignment and there is an S in the alignment\n//it would disappear in the logo plot without this class.\n:global .#{$acePrefix}S {\n  stroke: #000000;\n}\n\n//SPECIAL CASE 2\n//\n//logo plot fo \"S\" when rectangles are shown needs to have\n//fill with the color, not white as required for the glyph\n@each $styleName, $styleObj in map-get($aaProps, styles) {\n  $alignmentClass: map-get($aaProps, topLevelAlignmentClass);\n  $styleClass: map-get($styleObj, topLevelClass);\n\n  @each $aa, $color in map-get($styleObj, colors) {\n    $aceAAClass: $acePrefix + $aa;\n    :global\n      .#{$alignmentClass}.#{$styleClass}.#{$styPosAll}\n      svg\n      rect.#{$aceAAClass} {\n      @if $aa == S {\n        //serine glyph needs stoke coloring also\n        fill: $color;\n      }\n    }\n  }\n}\n"]}