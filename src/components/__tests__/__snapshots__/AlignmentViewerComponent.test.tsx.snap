// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AlignmentViewer Should render 1`] = `
<div
  className="alignment-viewer"
>
  <div
    className="mini-map hidden"
  >
    <MiniMapComponent
      alignHorizontal="right"
      alignment={
        Alignment {
          "aceEditorMode": undefined,
          "allUpperAlphaLettersInAlignmentSorted": Array [],
          "consensus": Array [],
          "globalAlphaLetterCounts": Object {},
          "name": "",
          "positionalLetterCounts": Map {},
          "predictedNT": true,
          "sequences": Map {
            SequenceSortOptions {
              "description": "As input",
              "distanceFn": undefined,
              "isTargetSequenceDependent": false,
              "key": "as-input",
            } => Array [],
          },
          "targetSequence": undefined,
          "uuid": "10000000-1000-4000-8000-100000000000",
        }
      }
      height={768}
      onClickOrDrag={[Function]}
      sortBy={
        SequenceSortOptions {
          "description": "As input",
          "distanceFn": undefined,
          "isTargetSequenceDependent": false,
          "key": "as-input",
        }
      }
      style={
        NucleotideAlignmentStyle {
          "alignmentType": AlignmentTypes {
            "allColorSchemes": Array [
              Object {
                "backgroundAlpha": NaN,
                "className": "",
                "colors": Object {
                  "": "",
                },
                "commonName": "Default",
                "description": "",
              },
            ],
            "className": undefined,
            "description": "Nucleotide Sequences",
            "key": "nucleotide-alignment",
          },
          "allColorSchemes": Array [
            Object {
              "backgroundAlpha": NaN,
              "className": "",
              "colors": Object {
                "": "",
              },
              "commonName": "Default",
              "description": "",
            },
          ],
          "colorScheme": Object {
            "backgroundAlpha": NaN,
            "className": "",
            "colors": Object {
              "": "",
            },
            "commonName": "Default",
            "description": "",
          },
          "positionsToStyle": PositionsToStyle {
            "className": undefined,
            "description": "All",
            "key": "all",
          },
          "residueDetail": ResidueStyle {
            "className": undefined,
            "description": "Light",
            "key": "light",
          },
        }
      }
      width={300}
    />
  </div>
  <div
    className="av-widget av-barplot-holder"
  >
    <div
      className="av-annotation"
    >
      Entropy / Gaps
    </div>
    <div
      className="av-content"
    >
      <SequenceBarplotComponent
        alignment={
          Alignment {
            "aceEditorMode": undefined,
            "allUpperAlphaLettersInAlignmentSorted": Array [],
            "consensus": Array [],
            "globalAlphaLetterCounts": Object {},
            "name": "",
            "positionalLetterCounts": Map {},
            "predictedNT": true,
            "sequences": Map {
              SequenceSortOptions {
                "description": "As input",
                "distanceFn": undefined,
                "isTargetSequenceDependent": false,
                "key": "as-input",
              } => Array [],
            },
            "targetSequence": undefined,
            "uuid": "10000000-1000-4000-8000-100000000000",
          }
        }
        dataSeries={
          Array [
            Object {
              "cssClass": "barplot-shannon-entropy",
              "getPositionalInfo": [Function],
              "id": "entropy",
              "name": "Entropy",
              "plotOptions": Object {
                "fixYMax": [Function],
              },
            },
            Object {
              "cssClass": "barplot-gaps",
              "getPositionalInfo": [Function],
              "id": "gaps",
              "name": "Gaps",
              "plotOptions": Object {
                "fixYMax": [Function],
              },
            },
          ]
        }
        height={100}
        positionWidth={0}
      />
    </div>
  </div>
  <div
    className="av-widget av-sequence-logo-holder"
  >
    <div
      className="av-annotation"
    >
      Logo:
    </div>
    <div
      className="av-content"
    >
      <div
        className="undefined  undefined"
      >
        <SequenceLogoComponent
          alignment={
            Alignment {
              "aceEditorMode": undefined,
              "allUpperAlphaLettersInAlignmentSorted": Array [],
              "consensus": Array [],
              "globalAlphaLetterCounts": Object {},
              "name": "",
              "positionalLetterCounts": Map {},
              "predictedNT": true,
              "sequences": Map {
                SequenceSortOptions {
                  "description": "As input",
                  "distanceFn": undefined,
                  "isTargetSequenceDependent": false,
                  "key": "as-input",
                } => Array [],
              },
              "targetSequence": undefined,
              "uuid": "10000000-1000-4000-8000-100000000000",
            }
          }
          alignmentType={
            AlignmentTypes {
              "allColorSchemes": Array [
                Object {
                  "backgroundAlpha": NaN,
                  "className": "",
                  "colors": Object {
                    "": "",
                  },
                  "commonName": "Default",
                  "description": "",
                },
              ],
              "className": undefined,
              "description": "Nucleotide Sequences",
              "key": "nucleotide-alignment",
            }
          }
          glyphWidth={0}
          height={100}
          logoType="Bar Plot"
        />
      </div>
    </div>
  </div>
  <div
    className="av-widget av-consensus-seq-holder"
  >
    <div
      className="av-annotation"
    >
      Consensus sequence:
    </div>
    <div
      className="av-content"
    >
      <div
        className="consensusseq-box"
      >
        <AceConsensusSequenceComponent
          alignment={
            Alignment {
              "aceEditorMode": undefined,
              "allUpperAlphaLettersInAlignmentSorted": Array [],
              "consensus": Array [],
              "globalAlphaLetterCounts": Object {},
              "name": "",
              "positionalLetterCounts": Map {},
              "predictedNT": true,
              "sequences": Map {
                SequenceSortOptions {
                  "description": "As input",
                  "distanceFn": undefined,
                  "isTargetSequenceDependent": false,
                  "key": "as-input",
                } => Array [],
              },
              "targetSequence": undefined,
              "uuid": "10000000-1000-4000-8000-100000000000",
            }
          }
          classNames="ace-consensusseq    "
          editorLoaded={[Function]}
          fontSize={0}
          sortBy={
            SequenceSortOptions {
              "description": "As input",
              "distanceFn": undefined,
              "isTargetSequenceDependent": false,
              "key": "as-input",
            }
          }
        />
      </div>
    </div>
  </div>
  <div
    className="av-widget av-target-seq-holder"
  >
    <div
      className="av-annotation"
    >
      Query sequence:
    </div>
    <div
      className="av-content"
    >
      <div
        className="queryseq-box"
      >
        <AceTargetSequenceComponent
          alignment={
            Alignment {
              "aceEditorMode": undefined,
              "allUpperAlphaLettersInAlignmentSorted": Array [],
              "consensus": Array [],
              "globalAlphaLetterCounts": Object {},
              "name": "",
              "positionalLetterCounts": Map {},
              "predictedNT": true,
              "sequences": Map {
                SequenceSortOptions {
                  "description": "As input",
                  "distanceFn": undefined,
                  "isTargetSequenceDependent": false,
                  "key": "as-input",
                } => Array [],
              },
              "targetSequence": undefined,
              "uuid": "10000000-1000-4000-8000-100000000000",
            }
          }
          classNames="ace-queryseq    "
          editorLoaded={[Function]}
          fontSize={0}
          sortBy={
            SequenceSortOptions {
              "description": "As input",
              "distanceFn": undefined,
              "isTargetSequenceDependent": false,
              "key": "as-input",
            }
          }
        />
      </div>
    </div>
  </div>
  <div
    className="av-widget av-position-indicator-holder"
  >
    <div
      className="av-annotation"
    >
      Position:
    </div>
    <div
      className="av-content"
    >
      <div
        className="position-box"
      >
        <AceTextualRulerComponent
          alignment={
            Alignment {
              "aceEditorMode": undefined,
              "allUpperAlphaLettersInAlignmentSorted": Array [],
              "consensus": Array [],
              "globalAlphaLetterCounts": Object {},
              "name": "",
              "positionalLetterCounts": Map {},
              "predictedNT": true,
              "sequences": Map {
                SequenceSortOptions {
                  "description": "As input",
                  "distanceFn": undefined,
                  "isTargetSequenceDependent": false,
                  "key": "as-input",
                } => Array [],
              },
              "targetSequence": undefined,
              "uuid": "10000000-1000-4000-8000-100000000000",
            }
          }
          classNames="ace-positions"
          editorLoaded={[Function]}
          fontSize={0}
          mouseDown={[Function]}
          mouseEnter={[Function]}
          mouseLeave={[Function]}
          mouseMove={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    className="av-widget av-ace-msa-holder"
  >
    <div
      className="av-annotation"
    >
      <div
        className="alignment-metadata-box"
      >
        <AceEditorComponent
          classNames="ace-alignment-metadata"
          editorLoaded={[Function]}
          fontSize={0}
          text=""
        />
      </div>
    </div>
    <div
      className="av-content"
    >
      <div
        className="alignment-box"
      >
        <AceMultipleSequenceAlignmentComponent
          alignment={
            Alignment {
              "aceEditorMode": undefined,
              "allUpperAlphaLettersInAlignmentSorted": Array [],
              "consensus": Array [],
              "globalAlphaLetterCounts": Object {},
              "name": "",
              "positionalLetterCounts": Map {},
              "predictedNT": true,
              "sequences": Map {
                SequenceSortOptions {
                  "description": "As input",
                  "distanceFn": undefined,
                  "isTargetSequenceDependent": false,
                  "key": "as-input",
                } => Array [],
              },
              "targetSequence": undefined,
              "uuid": "10000000-1000-4000-8000-100000000000",
            }
          }
          characterSizeChanged={[Function]}
          classNames="ace-alignment    "
          editorLoaded={[Function]}
          fontSize={0}
          sortBy={
            SequenceSortOptions {
              "description": "As input",
              "distanceFn": undefined,
              "isTargetSequenceDependent": false,
              "key": "as-input",
            }
          }
        />
      </div>
    </div>
  </div>
</div>
`;
